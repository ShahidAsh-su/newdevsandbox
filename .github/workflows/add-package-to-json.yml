name: Update sfdx-project.json

on:
  workflow_dispatch:
    inputs:
      packageName:
        description: 'Version number for the package (e.g., 1.1.0.1)'
        required: true
        default: 'code'
      packageVersionId:
        description: 'Subscriber Package Version ID'
        required: true
        default: '04tOs000000GYP7IAO'

jobs:
  update-sfdx-project:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install jq
        run: |
          sudo apt-get install jq
          
      # Set Git user identity based on the current user
      - name: Set Git user identity
        if: success()
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

      - name: Extract Last Version Number
        run: |
          PACKAGE_NAME="${{ github.event.inputs.packageName }}"
          BRANCH_NAME="${{ github.ref_name }}" # Get the branch name
          echo "Package name: $PACKAGE_NAME"
          echo "Branch name: $BRANCH_NAME"

          # Extract version strings for the given package
          LAST_VERSION=$(jq -r --arg pkg "$PACKAGE_NAME@" '.packageAliases | to_entries[] | select(.key | startswith($pkg)) | .key' sfdx-project.json | sort -t'@' -k2 -V | tail -n1)
          
          if [ -z "$LAST_VERSION" ]; then
            echo "No previous version found for $PACKAGE_NAME. Starting with 20.00.01.0."
            NEW_VERSION="20.00.01.0"
          else
            echo "Last version found: $LAST_VERSION"
            # Extract the version part
            CURRENT_VERSION=$(echo "$LAST_VERSION" | sed "s/^$PACKAGE_NAME@//")
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            
            # Extract version components
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}

            # Determine branch-specific logic
            if [[ "$BRANCH_NAME" == "main" ]]; then
              # Increment MINOR version and reset PATCH to zero
              MINOR=$((MINOR + 1))
              PATCH=0
              NEW_VERSION="$MAJOR.$MINOR.$PATCH.0"
            elif [[ "$BRANCH_NAME" =~ ^[Hh][Oo][Tt][Ff][Ii][Xx] ]]; then
              # Increment PATCH version
              PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$PATCH.0"
            else
              echo "Error: Branch name must be 'BackUp' or start with 'Hotfix'."
              exit 1
            fi
          fi

          echo "Calculated new version: $NEW_VERSION"
          echo "VERSION_NUMBER=$NEW_VERSION" >> $GITHUB_ENV
